function [statxb,statsdb,nancntb,hf]=show_trialox(filepath,triallist,kanallist,hf,graphstep,tanflag)
% SHOW_TRIALOX temporal and spatial (plus orientation) display of list of trials
% function [statxb,statsdb,nancntb,hf]=show_trialox(filepath,triallist,kanallist,hf,graphstep,tanflag)
% show_trialox: Version 10.06.09
%
%   Syntax
%       Note: This function supercedes show_trialo. Shows Cartesian and orientation 'spatial' displays in separate figures
%           , showing all combinations of x, y, z in 2D displays, plus 4th 3D display (like show_trialo includes display of
%       average orientation in the cartesian displays)
%       hf: Set to missing or empty for first call to initialize figures
%               For subsequent calls use output arg hf as input arg. This
%               preserves the content of statxb from previous calls to the
%               function
%		graphstep: Optional, default to 1. Step through trial list for
%			graphic update. As graphic update gets slower and slower in a long
%			list of trials, this can speed things up if one is mainly
%			interested in the final statistics rather than the graphics
%       tanflag: Optional, default to 1 (true). Replace parameter 7 with
%           tangential velocity in displays and statistics
%       statsb, statsdb:    Contain list of means and sds per trial
%                           1st dimension: Trial
%                           2nd dimension: Position (x,y,z), Orientation (x,y,z component), rms, tangential velocity
%                               Position and velocity in mm and mm/s
%                           3rd dimension: Sensor
%       nancntb: Arranged trials (rows), sensors (columns). Shows total missing data per trial
%
%   Notes
%       Also designed to be used for quasi-realtime display during
%       experimental sessions. See do_showtrial_rtmon
%
%	Updates
%		3.09. Tag of axes objects given same value as title (should make
%		setting manual scaling easier). Scaling of all axes is no longer automatic.
%		See showtrial_rangeset for example of how to set the ranges
%		manually.
%		6.09 Stats buffer size increased
%       9.10. Position and orientation trajectory figures merged; choiced
%           of exisiting parameter 7 or tangential velocity
%
%   See Also
%       DO_SHOWTRIAL_RTMON SHOWSTATS SHOWTRIAL_RANGESET

functionname='show_trialox: Version 10.06.09';

igstep=1;
if nargin>4 igstep=graphstep; end;
if isempty(igstep) igstep=1; end;

dotan=1;
if nargin>5 dotan=tanflag; end;



ncoord=6;       %assume fixed (3 position + 3 orientation)
maxchan=12;

ndig=4;     %digits for trial number
%mytrial=str2num(filename((end-ndig+1):end));

%length of orientation vector in cartesian display
%default value of 10 should be appropriate for tongue sensors
orifac=10;       %can be changed via userdata of orientation figure

%subplots for time-function (and trial average) displays
sprow=3;
spcol=3;

maxsubp=sprow*spcol;

%set up basic views for the spatial displays
%(if more flexibility is required, see the subfunction makeviews in mt_sxyv
%yz, xz, yx, 3d = coronal, sagittal, axial, 3D for raw helmet coordinate
%system
%(for data based on final coordinate system a different arrangement would
%be better)
%trajview=[90 0;0 0;90 -90;-37.5 30];
trajview=[90 0;0 0;90 -90];

ntraj=size(trajview,1);
trajsprow=2;        %position, orientation
trajspcol=ntraj;

posrange=100;	%initial position axes settings: +/- posrange
%(orientation set to +/-1)

rmsrange=30;
tangvelrange=300;
if ~dotan tangvelrange=5;   end;    %initially assume kalman fb difference

nfig=3;
if length(hf)~=nfig
	maxtrialb=2000;		%increased 6.09
%	maxtrialb=1000;
	if length(hf)==1 maxtrialb=hf; end;

	for ii=1:nfig hf(ii)=figure; end;
	set(hf,'userdata',[]);
	set(hf(1),'tag','showtrial_cbfig');     %time functions for current trial
	set(hf(3),'tag','showtrial_statsfig');
	set(hf(2),'tag','cartesian');
    userdata.pos=[];
    userdata.ori=[];
    set(hf(2),'userdata',userdata);
    %	set(hf(4),'tag','orientation');
end;

plotlist=triallist(1:igstep:end);
plotlist=plotlist(:);
%make sure graphics are updated at end of list
if plotlist(end)~=triallist(end) plotlist=[plotlist;triallist(end)]; end;


maxtrial=2;
for mytrial=triallist
	disp(mytrial)
	mytrials=int2str0(mytrial,ndig);

	filename=[filepath mytrials];
	%normally loaded from input file
	sf=200;


	rmsp=ncoord+1;
	%Currently, tangential velocity replaces whatever data was located in the
	%column after rms ('newflag') if dotan is true
	%(see also below for manipulation of descriptor)
	tangp=rmsp+1;
	nco=ncoord+2;

	%stats for one trial
	statx=ones(nco,maxchan)*NaN;
	statsd=statx;
	nancnt=ones(1,maxchan)*NaN;

	%loadpos_sph2cartm (and loadpos) should return empty data if file not
	%found, but test explicitly here
	if exist([filename '.mat'],'file')
		[data,descriptor,unit,dimension,sensorlist]=loadpos_sph2cartm(filename);

		if ~isempty(data)
			descriptor=cellstr(descriptor);
            unit=cellstr(unit);
			if dotan 
                descriptor{tangp}='Tangential Vel.'; 
                unit{tangp}='pos_units/s';      %lazy!!!    
            end;
			descriptor=char(descriptor);
            unit=char(unit);
			ndat=size(data,1);
			%set up true time axis


			sf=mymatin(filename,'samplerate',200);
			tvec=((1:ndat)-1)*(1/sf);
			sensorlistall=sensorlist;
			sensorlist=sensorlist(kanallist,:);


			nkanal=length(kanallist);

			nancnt(kanallist)=sum(isnan(squeeze(data(:,1,kanallist))));

			%calculate tangential velocity; add to coordinate data if dotan
			%true. Maybe make tangvel available some other way if dotan
			%false
			eucbuf=zeros(ndat,nkanal);
			for ikanal=kanallist
				posdat=data(:,1:3,ikanal);
				euctmp=eucdistn(posdat(1:end-1,:),posdat(2:end,:))*sf;
				euctmp=[euctmp;euctmp(end)];  %make same length as other time functions
				%temprorary; should check position is available
				if dotan data(:,tangp,ikanal)=euctmp; end;
			end;



			%do stats for current trial, and accumulate in buffer for all trials
			userdata=get(hf(3),'userdata');


			if isempty(userdata)
				statxb=ones(maxtrialb,nco,maxchan)*NaN;
				statsdb=statxb;
				nancntb=ones(maxtrialb,maxchan)*NaN;
			else
				statxb=userdata.statxb;
				statsdb=userdata.statsdb;
				maxtrialb=size(statxb,1);
				maxtrial=userdata.maxtrial;
				nancntb=userdata.nancntb;
				if mytrial>maxtrialb
					disp('Statistics buffer too small');
				end;
			end;

			maxtrial=max([maxtrial mytrial]);
			nancntb(mytrial,:)=nancnt;
			for ikanal=kanallist
				if nancnt(ikanal)<ndat

					tmp=(nanmean(data(:,1:nco,ikanal)))';

					%            keyboard;
					statx(:,ikanal)=tmp;
					statsd(:,ikanal)=(nanstd(data(:,1:nco,ikanal)))';

				end;
			end;

			statxb(mytrial,:,:)=statx;
			statsdb(mytrial,:,:)=statsd;
if ~isempty(userdata)
			userdata.statxb=statxb;
				userdata.statsdb=statsdb;
				userdata.nancntb=nancntb;
                
                userdata.maxtrial=maxtrial;
                userdata.descriptor=descriptor;
                userdata.unit=unit;
				set(hf(3),'userdata',userdata);
				drawnow;
end;
			if ismember(mytrial,plotlist)
				%====================================================
				%plot trial statistics similarly to timewave of current trial

				figure(hf(3));
				mycol=hsv(nkanal+1);

				for ico=1:nco
					pptmp=squeeze(statxb(1:maxtrial,ico,kanallist));
					pptmpsd=squeeze(statsdb(1:maxtrial,ico,kanallist));
					if isempty(userdata)
						hax(ico)=subplot(sprow,spcol,ico);
						if ico==1
							hl=ones(nkanal,nco)*NaN;
							hlu=hl;
							hld=hl;
						end;
						hl(:,ico)=plot(pptmp,'linewidth',2,'marker','.');
						hold on
						hlu(:,ico)=plot(pptmp+pptmpsd,'linestyle',':','linewidth',2,'marker','.');
						hld(:,ico)=plot(pptmp-pptmpsd,'linestyle',':','linewidth',2,'marker','.');
						hold off
						for ii=1:nkanal set([hl(ii,ico) hlu(ii,ico) hld(ii,ico)],'color',mycol(ii,:)); end;
						mytit=deblank(descriptor(ico,:));
						title(mytit,'interpreter','none');
						set(gca,'tag',mytit);
						if ico==nco xlabel('Trial number'); end;
						ylabel(unit(ico,:));
						%preset the ranges
						if strcmp(mytit(1:3),'pos') set(hax(ico),'ylim',[-posrange +posrange]);end;
						if strcmp(mytit(1:3),'ori') set(hax(ico),'ylim',[-1 +1]);end;
						if strcmp(mytit(1:3),'rms') set(hax(ico),'ylim',[0 rmsrange]);end;
						if strcmp(mytit(1:3),descriptor(tangp,1:3)) set(hax(ico),'ylim',[0 tangvelrange]);end;
						

					else
						hax=userdata.axes;
						hl=userdata.lines;
						hlu=userdata.linesu;
						hld=userdata.linesd;
						doplotstats(hl(:,ico),hlu(:,ico),hld(:,ico),pptmp,pptmpsd);
					end;

				end;
				%also plot nancnt
				nantmp=nancntb(:,kanallist);
				if isempty(userdata)
					hax(nco+1)=subplot(sprow,spcol,nco+1);
					hlnan=plot(nantmp,'linewidth',2,'marker','.');
					for ii=1:nkanal set(hlnan(ii),'color',mycol(ii,:)); end;
					title('NaN count');
					xlabel('Trial number');
				else
					hlnan=userdata.hlnan;

					for ii=1:nkanal set(hlnan(ii),'xdata',(1:size(nantmp,1))','ydata',nantmp(:,ii));end;


					set(hax,'xlim',[0 maxtrial]);

				end;

				drawnow;

				userdata.statxb=statxb;
				userdata.statsdb=statsdb;
				userdata.lines=hl;
				userdata.linesu=hlu;
				userdata.linesd=hld;
				userdata.axes=hax;
				userdata.nancntb=nancntb;
				userdata.maxtrial=maxtrial;
				userdata.hlnan=hlnan;
				userdata.sensorlist=sensorlistall;
                userdata.descriptor=descriptor;     %needed again here
                userdata.unit=unit;
				set(hf(3),'userdata',userdata);
				drawnow


				%=========== end of plot of trial statistics


				%========== Plot time wave of current trial


				figure(hf(1));
				set(hf(1),'Name',['Trial ' int2str(mytrial)]);
				userdata=get(hf(1),'userdata');
				mycol=hsv(nkanal+1);

				for ico=1:nco
					pptmp=squeeze(data(:,ico,kanallist));
					if isempty(userdata)
						if ico==1 hl=ones(nkanal,nco)*NaN; end;
						hax(ico)=subplot(sprow,spcol,ico);
						hl(:,ico)=plot(tvec,pptmp,'linewidth',2);
						for ii=1:nkanal set(hl(ii,ico),'color',mycol(ii,:)); end;
						%               keyboard;
						if ico==1
							%                    keyboard;
							[LEGH,OBJH,OUTH,OUTM]=legend(hl(:,ico),strcat(int2str(kanallist'),' : ',sensorlist));

							hxxx=findobj(OBJH,'type','text');
							set(hxxx,'interpreter','none');
						end;
						mytit=deblank(descriptor(ico,:));
						title(mytit,'interpreter','none');
						set(gca,'tag',mytit);
						if ico==nco xlabel('Time (s)'); end;
						ylabel(unit(ico,:));
						if strcmp(mytit(1:3),'pos') set(hax(ico),'ylim',[-posrange +posrange]);end;
						if strcmp(mytit(1:3),'ori') set(hax(ico),'ylim',[-1 +1]);end;
						if strcmp(mytit(1:3),'rms') set(hax(ico),'ylim',[0 rmsrange]);end;
						if strcmp(mytit(1:3),descriptor(tangp,1:3)) set(hax(ico),'ylim',[0 tangvelrange]);end;

					else
						hl=userdata.lines;
						hax=userdata.axes;
						doplot(hl(:,ico),pptmp,tvec);
					end;

				end;
				drawnow;

				%so user can interrupt real-time monitoring
				if isempty(userdata)
					set(hf(1),'windowbuttondownfcn',@showtrial_cb);
					userdata.userflag=0;
				end;


				userdata.lines=hl;
				userdata.axes=hax;
				set(hf(1),'userdata',userdata);
				drawnow;
				%======== end of plot of timewave of current trial

				%======= plot spatial trajectories (for cartesian and orientation data) of
				%current trial
				posd=data(:,1:3,kanallist);
				orid=data(:,4:6,kanallist);

				statxch=statx(:,kanallist);

				%get orifac from userdata somewhere

				tmpdata=get(hf(2),'userdata');
				if ~isempty(tmpdata.ori)
					orifac=tmpdata.ori.orifac;
				end;


				ovec=makeovec(statxch,orifac);
				myzeros=zeros(1,nkanal);
				orgorix=[myzeros;statxch(4,:)];
				orgoriy=[myzeros;statxch(5,:)];
				orgoriz=[myzeros;statxch(6,:)];

				%to plot zero-length lines at mean position
				meanposx=[statxch(1,:);statxch(1,:)];
				meanposy=[statxch(2,:);statxch(2,:)];
				meanposz=[statxch(3,:);statxch(3,:)];



				%Cartesian

				figure(hf(2));
				set(hf(2),'Name',['Trial ' int2str(mytrial)]);
				userdataposori=get(hf(2),'userdata');
                userdata=userdataposori.pos;
				if isempty(userdata)
					hlcart=ones(nkanal,ntraj)*NaN;
					hlcartx=ones(nkanal,ntraj)*NaN;
					hlto=ones(ntraj,1)*NaN;
					% The plot commands for the all views are absolutely identical, just the view
					% is set differently after generating the plot

					%Cartesian data
					% In the cartesian displays also plot a line showing the mean orientation of the sensor in that trial at the
					% mean spatial position

					for itraj=1:ntraj
						haxtc(itraj)=subplot(trajsprow,trajspcol,itraj);
						hlcart(:,itraj)=plot3(squeeze(posd(:,1,:)),squeeze(posd(:,2,:)),squeeze(posd(:,3,:)),'linewidth',2);
						hlcartx(:,itraj)=line(meanposx,meanposy,meanposz,'linewidth',2,'marker','o','markersize',12);
						%orientation vector starting at mean cartesian position
						hlto(itraj)=line('xdata',ovec(:,1),'ydata',ovec(:,2),'zdata',ovec(:,3),'linewidth',2,'color','k');
						xlabel('X');ylabel('Y');zlabel('Z');
						title('Position');
						set(gca,'tag','Position');
						set(gca,'view',trajview(itraj,:));
						axis equal
						grid on;
					end;
					%keyboard;
						set(haxtc,'xlim',[-posrange posrange],'ylim',[-posrange posrange],'zlim',[-posrange posrange]);
					for ii=1:nkanal
						set(hlcart(ii,:),'color',mycol(ii,:));
						set(hlcartx(ii,:),'color',mycol(ii,:));
					end;

				else
					hlcart=userdata.lines;
					hlcartx=userdata.linesx;
					haxtc=userdata.axes;
					dotraj(hlcart,posd);
					hlto=userdata.olines;
					%                keyboard;
					set(hlto,'xdata',ovec(:,1),'ydata',ovec(:,2),'zdata',ovec(:,3));
					for ii=1:nkanal
						set(hlcartx(ii,:),'xdata',meanposx(:,ii),'ydata',meanposy(:,ii),'zdata',meanposz(:,ii));
					end;
				end;

%				drawnow;

				userdata.lines=hlcart;
				userdata.linesx=hlcartx;
				userdata.axes=haxtc;
				userdata.olines=hlto;
                userdataposori.pos=userdata;
%				set(hf(2),'userdata',userdataposori);
%				drawnow;

				%Orientation

%				figure(hf(4));
%				set(hf(4),'Name',['Trial ' int2str(mytrial)]);
%				userdata=get(hf(4),'userdata');
                userdata=userdataposori.ori;
				if isempty(userdata)

					%In the orientation display also plot a line from the origin to the mean
					%orientation value for the trial
					hlorgori=ones(nkanal,ntraj)*NaN;
					hlori=ones(nkanal,ntraj)*NaN;



					% The plot commands for the all views are absolutely identical, just the view
					% is set differently after generating the plot


					for itraj=1:ntraj
						haxto(itraj)=subplot(trajsprow,trajspcol,itraj+ntraj);
						hlori(:,itraj)=plot3(squeeze(orid(:,1,:)),squeeze(orid(:,2,:)),squeeze(orid(:,3,:)),'linewidth',2);
						%                for iki=1:nkanal
						%                    hlorgori(iki,itraj)=line('xdata',orgorix(:,iki),'ydata',orgoriy(:,iki),'zdata',orgoriz(:,iki),'linewidth',2,'marker','.','linestyle','--');
						%                end;
						hlorgori(:,itraj)=line(orgorix,orgoriy,orgoriz,'linewidth',2,'marker','.','linestyle','--');



						xlabel('X');ylabel('Y');zlabel('Z');
						title('Orientation');
						set(gca,'view',trajview(itraj,:));
						set(gca,'tag','Orientation');
						
						axis equal
						grid on;
					end;

					for ii=1:nkanal set(hlori(ii,:),'color',mycol(ii,:)); end;
					for ii=1:nkanal set(hlorgori(ii,:),'color',mycol(ii,:)); end;

					set(haxto,'xlim',[-1 1],'ylim',[-1 1],'zlim',[-1 1]);

				else
					hlori=userdata.lines;
					haxto=userdata.axes;
					dotraj(hlori,orid);
					hlorgori=userdata.olines;
					for ii=1:nkanal
						set(hlorgori(ii,:),'xdata',orgorix(:,ii),'ydata',orgoriy(:,ii),'zdata',orgoriz(:,ii));
					end;

				end;

%				drawnow;

				userdata.lines=hlori;
				userdata.axes=haxto;
				userdata.olines=hlorgori;
				userdata.orifac=orifac;
                userdataposori.ori=userdata;
				set(hf(2),'userdata',userdataposori);
				drawnow;
			end;			%trial in plotlist


		end;
	else
		disp('No trial?');
	end;

end;        %loop thru trials

function dotraj(hl,posd);
%this is actually also used for orientation data
nl=size(hl,1);
nt=size(hl,2);
for ii=1:nl
	for jj=1:nt
		set(hl(ii,jj),'xdata',posd(:,1,ii),'ydata',posd(:,2,ii),'zdata',posd(:,3,ii));

	end;

end;




function doplot(hl,pptmp,tvec);
nl=length(hl);

for ii=1:nl set(hl(ii),'xdata',tvec,'ydata',pptmp(:,ii));end;

function doplotstats(hl,hlu,hld,pptmp,pptmpsd);
nl=length(hl);
tvec=(1:size(pptmp,1))';
for ii=1:nl
	set(hl(ii),'xdata',tvec,'ydata',pptmp(:,ii));
	set(hlu(ii),'xdata',tvec,'ydata',pptmp(:,ii)+pptmpsd(:,ii));
	set(hld(ii),'xdata',tvec,'ydata',pptmp(:,ii)-pptmpsd(:,ii));

end;

function ovec=makeovec(statx,orifac);
maxchan=size(statx,2);
ovec=ones(3,maxchan,3)*NaN;
for ii=1:maxchan
	ovec(1,ii,:)=statx(1:3,ii);
	ovec(2,ii,:)=statx(1:3,ii)+(statx(4:6,ii)*orifac);
end;

ovec=reshape(ovec,[3*maxchan,3]);
function showtrial_cb(cbobj,cbdata)
% Indicates button press in figure 1

y=get(cbobj,'userdata');
y.userflag=1;
set(cbobj,'userdata',y);

