function adjampsapc(inpath,outpath,triallist,sensorlist,cofffile)
% ADJAMPSAPC Adjust amplitudes using prediction of residue from all amplitudes (or principal component analysis of amplitudes)
% function adjampsapc(inpath,outpath,triallist,sensorlist,cofffile)
% adjampsapc: Version 25.2.09
%
%   Description
%		inpath/outpath: 
%			Amps subdirectories, specified without final pathchar
%
%       sensorlist: 
%			Vector of sensors to process.
%
%		cofffile:
%			Results of regression analysis to be used are loaded from cofffile
%			This will normally have been generated by AMPVSPOSAMPA7PC.
%
%		Background information on the contents of cofffile:
%       This must contain the cell array bc with the vector of regression
%       coefficients
%       The precise number of regression coefficients will depend on
%       whether the regression was based on the raw amplitude data, or on
%       principal components, and on the way the regression matrix was
%       constructed (e.g 'linear','interaction' : this information is
%       stored in the variable x2fx_mode. This variable must be present in
%       cofffile, i.e no defaults)
%       cofffile must also contain the cell array pc, containing as a structure for each sensor the details of
%       any principal component analysis. If field pcorder == 0 then no
%       further use is made of it.
%       (cofffile must also contain variable ampfac (premultiplication
%       factor so amplitudes are expressed (roughly) in AD units rather
%       than as normalized by the calibration): normal value 2500
%
%   See Also
%       AMPVSPOSAMPA7PC
%
%	Updates
%		2.09 Tidied up help text

functionname='adjampsapc: Version 25.02.2009';

myversion=version;
saveop='-v6';
if myversion(1)<'7' saveop=''; end;

bc=mymatin(cofffile,'bc');
x2fx_mode=mymatin(cofffile,'x2fx_mode');
pc=mymatin(cofffile,'pc');
ampfac=mymatin(cofffile,'ampfac');

newcomment=['Input path: ' inpath crlf 'Output path: ' outpath crlf ...
        'Coefficient file : ' cofffile crlf 'x2fx mode : ' x2fx_mode crlf ...
        'First/last/n trials: ' int2str([triallist(1) triallist(end) length(triallist)]) crlf ...
        'Sensor list: ' int2str(sensorlist) crlf ...
        'Adjustment coefficients in private.adjamps' crlf 'Matlab version : ' myversion crlf];


nsensor=length(sensorlist);

ndig=4;



for itrial=triallist
    inname=[inpath pathchar int2str0(itrial,ndig)];
    outname=[outpath pathchar int2str0(itrial,ndig)];
    matin=0;
    private=[];
    comment='';
    if exist([inname '.mat'])
        matin=1;
        copyfile([inname '.mat'],[outname '.mat']);
        warning off;
        private=mymatin(inname,'private');
        warning on;
        
        comment=mymatin(inname,'comment');
        
    end;
    
    %embed trace of any previous processing
    if isfield(private','adjampsapc')
        private.adjampsapc.adjampsapc=private.adjampsapc;
    end;
    
    private.adjampsapc.b=bc;
    private.adjampsapc.pc=pc;
    
    comment=[newcomment comment];
    comment=framecomment(comment,functionname);
    
    data=loadamp(inname);
    data=data*ampfac;
    disp(itrial);
    if ~isempty(data)
        ndim=size(data,2);
        for isensor=1:nsensor
            mysensor=sensorlist(isensor);
            %essential to use a copy as original data is overwritten!!
            da=data(:,:,mysensor);
            predmat=x2fx(da,x2fx_mode);
            PC=pc{mysensor};
            nscore=PC.pcorder;
            if nscore
                sduse=PC.sdev;
                if PC.covflag
                    sduse=[];
                end;
                eigvec=PC.eigvec;
                eigvec=eigvec(:,1:nscore);
                pcscore=pcscores(da,eigvec,PC.xbar,sduse);
                predmat=x2fx(pcscore,x2fx_mode);
            end;
            
            
            for idim=1:ndim
                dd=da(:,idim);
                predres=predmat*bc{mysensor,idim};
                dd=dd+predres;
                data(:,idim,mysensor)=dd;
            end;
        end;
        
        %always output as mat file, but some variables will be missing if
        %input was not mat
        data=data/ampfac;
        data=single(data);
        if matin
            save(outname,'data','comment','private','-append',saveop);
        else
            save(outname,'data','comment','private',saveop);
        end;
        
        
        %    saveamp([outpath pathchar int2str0(itrial,ndig) ampext],data);
        
        
        
    else
        disp('skipping trial');
    end;
    
end;

