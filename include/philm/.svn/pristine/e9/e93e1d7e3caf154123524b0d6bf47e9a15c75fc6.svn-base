function mt_inisona(sonanames,subplotspec)
% MT_INISONA Initialize sonagram display
% function mt_inisona(sonanames,subplotspec)
% mt_inisona: Version 12.3.03
%
%	Syntax
%		sonanames: List of names for the sonagram axes
%		subplotspec: Optional. 2-element vector to specifiy arrangement of xy axes
%			Defaults to n_axes rows * 1 column
%
%	Remarks
%		General idea based on mt_inixy
%		Details not worked out yet
%
%	Description
%		This lists the fields in the userdata of the sona figure, and then in the userdata of each axes
%
%		Figure
%
%			axis_names
%				set to input argument xynames
%
%			sub_cut_flag
%				enable/disable subcut display in ALL axes
%
%			display_flag
%				enable/disable axes for display (vector of 0s or 1s corresponding to each axes
%
%		Axes
%
%			n_trajectories
%
%			trajectory_names
%				Names by which to refer to the trajectories, e.g for contour order or in mt_sxytp
%
%			{x|y|z|c}_mode
%				Type of data to use for each axis. Current possibilities are:
%				signal_data, time, constant, sensor_number
%
%			{x|y|z|c}_specs
%				Some axis modes require futher specifications:
%					signal_data: List of the signals to use
%					constant:    Scalar value (or expression that evaluates to a scalar value)
%
%			hold_mode
%				If 'on' old trajectories will not be deleted
%
%			contour_order
%				A list (string matrix) of trajectory names to determine the order in which to draw contours
%				(names can occur more than once, allowing closed shapes to be drawn.
%				Empty list elements can be used to interrupt the contour e.g to seperate tongue and lips
%				If set to '<default>' (or completely empty) use the order in 'trajectory_names'
%
%			(The next 4 items are needed for extracting data from MT_XYDATA for contour drawing:)
%
%			axis_number
%
%			samplerate
%
%			time_spec
%				2-element vector (start and end of trajectory) 
%
%			trial_number
%
%			surface_mode
%				If set to 'both', 'rows' or 'columns' the data will be used to draw a surface object
%				with this mesh specification. See also????
% 
%			(Fields for sub_cut display:)
%
%			sub_cut_marker
%				If this is a 2-row string matrix of marker types, 
%				segmentation boundaries will be placed on the trajectories
%
%			sub_cut_linestyle
%				2-row string matrix of linestyles.
%				Enables contours to be shown at sub_cut boundaries. Defaults to 'none'
%
%			sub_cut_labelposition
%				Relative position of label
%				0=at start of segment, 1=at end of segment; set to NaN or some large number to suppress labels
%
%	See Also
%		MT_INIXY
%		MT_SXYFD / MT_GXYFD to access parameters stored in xy figure userdata
%		MT_SXYAD / MT_GXYAD to access parameters stored in axes userdata
%		MT_SXYL to set axis limits
%		MT_SXYV	to set axes view
%		MT_GXYCD	get data to prepare for contour display
%		MT_XYDIS	The actual display routine
%		(Not yet implemented:)
%		MT_SXYAP / MT_GXYAP to set axes graphics parameters
%		MT_SXYTP / MT_GXYTP to set trajectories graphics parameters

xynames=sonanames;	%this function based on mt_inixy

figtag='mt_sona';
nax=size(xynames,1);

%alternative if called with no args. delete fig, but also in mt_org figure axis???

myversion=version;	%only needed for graphics details

if nax
   hh=mt_gfigh(figtag);
   if ~isempty(hh)
      %confirmation??
      disp('mt_inisona: Resetting sona display');
      delete(hh);
      %need to delete cursor handles in figure data..????? (same problem with xy???)
      
      
   end;
   hh=figure;
   myS.axis_names=xynames;
   myS.sub_cut_flag=0;					%enable/disable subcut display in ALL axes
   myS.display_flag=ones(nax,1);		%all axes enabled for display
   set(hh,'tag',[figtag mt_gsnum(1)],'userdata',myS,'papertype','a4letter','pointer','crosshair','colormap',myhsv2rgb);%more settings?????
   set(hh,'numbertitle','off','menubar','none');
set(hh,'name',[int2str(hh) ': ' get(mt_gfigh(figtag),'tag')]);

   
   %sort out subplot arrangement
   usesubplot=0;
   if nargin>1
      if length(subplotspec)==2
         if subplotspec(1)*subplotspec(2)>=nax
            usesubplot=1;
         end;
      end;
   end;
   if usesubplot
      sprow=subplotspec(1);spcol=subplotspec(2);
   else
      sprow=nax;spcol=1;
   end;
   
   %initialize the struct for the userdata of each axis
   myS=struct(...
      'signal','',...
      'main_overlay_signals','',...
      'dependent_overlay_signals','',...
      'overlay_scaling','dependent',...
      'image_type','image',...
      'clim',[],...
      'shape_vector',[],...   
      'axis_number',1,...
      'samplerate',[],...
      'time_spec',[],...
      'trial_number',[],...
      'sub_cut_marker',str2mat('^','v'),...
      'sub_cut_linestyle',str2mat('-.',':'),...
      'sub_cut_labelposition',[0.5]...
      );
   
   myfonts=[16 14 14 12 12 12 10 10];
   naxx=sprow*spcol;
   if naxx>length(myfonts)
      myfs=8;
   else
      myfs=myfonts(naxx);
   end;
   
   figS=mt_gfigd;
   curbuf=figS.time_cursor_handles;	%add cursor handles for sona axes to existing ones
   
   signallist=mt_gcsid('signal_list');
   
   for ii=1:nax
      myname=deblank(xynames(ii,:));
      ha=subplot(sprow,spcol,ii);
      habuf(ii)=ha;
      myS.axis_number=ii;
      
      
      
%      title(myname,'interpreter','none','fontsize',myfs);
      title(myname,'interpreter','none','fontsize',10);
      xlabel('Time (s)','interpreter','none','fontsize',myfs);
      
      %more initializing if axis is also a signal
      vs=strmatch(myname,signallist,'exact');
      if length(vs)==1
         myS.signal=myname;
         myS.samplerate=mt_gsigv(myname,'samplerate');
         sigunit=mt_gsigv(myname,'unit');
         mydim=mt_gsigv(myname,'dimension');
         dimd=deblank(mydim.descriptor(1,:));
         dimu=deblank(mydim.unit(1,:));
         ylabel([dimd ' (' dimu ')'],'interpreter','none','fontsize',myfs);
      else
         disp(['mt_inisona; Not a signal? ' myname]);
      end;		%initialize signal
      
      set(ha,'tag',myname,'userdata',myS,'xticklabel','');
      
      
   end;	%nax loop
   
   
   %loop to set up colorbars. This will shift the axes position
   for ii=1:nax
      myname=deblank(xynames(ii,:));
      axes(habuf(ii));
      oldpos=get(gca,'position');
      sigunit=mt_gsigv(myname,'unit');	%assumes axes is a signal????
      hcb=colorbar;
      axes(hcb);
      
      %make colorbar smaller than default
      cbpos=get(gca,'position');
      cbpos(4)=cbpos(4)/2;
      cbpos(1)=cbpos(1)+0.75*cbpos(3);
      cbpos(3)=cbpos(3)*0.25;
      if spcol==1 cbpos(1)=0.95; end;
      set(hcb,'position',cbpos,'tag',[myname '_colorbar']);
      title(sigunit,'interpreter','none');
      
      %restore data axes position
      set(habuf(ii),'position',oldpos);
      
      %	keyboard;
   end;
   
   
   %if combined with mt_imark, mt_imark should be called afterwards
   
   maxt=max(mt_gcufd('type'));
   maxt=max([maxt 1]);
   
   for ii=1:nax
      myname=deblank(xynames(ii,:));
      mypos=get(habuf(ii),'position');
      ha=axes('position',mypos);
      
      
      
      
      set(ha,'tag',[myname '_cursor_axis'],'ylim',[0 maxt],'tickdir','out','ycolor','r');
      
      if myversion(1)>'5' set(ha,'yaxislocation','right');end;
      
      
      ylabel('cut_type','interpreter','none','fontsize',10,'verticalalignment','bottom');%actually horizontal adjustment, to keep away from colorbar
      
      
      tmpcol=figS.cursor_colours;
      curstat=figS.cursor_status;
      %maybe this ought to be a separate axes, as in main time figure
      %create line objects for cursors. Left, right and movie
      curh=line([0 1 0.5;0 1 0.5],[0 0 0;maxt maxt maxt]);
      
      set (curh,'EraseMode','xor','visible','off');
      set (curh(1),'tag','left_cursor','color',tmpcol(curstat(1)+1),'marker','o','markersize',12);
      set (curh(2),'tag','right_cursor','color',tmpcol(curstat(2)+1),'marker','o','markersize',12);
      set (curh(3),'tag','movie_cursor','color',tmpcol(3),'marker','o','markersize',12);
      
      curbuf=[curbuf;curh'];   
      
      
      %create two line objects to show subcut positions   
      %text objects will be created as needed
      
      hl=line([0;0],[0;1]);
      set(hl,'tag','sub_cut_start','visible','off','color','w','markersize',10);
      hl=line([0;0],[0;1]);
      set(hl,'tag','sub_cut_end','visible','off','color','w','markersize',10);
      
   end;	%nax loop
   
   
   
   
   
   
   
   
   
   %what happens if sona figure is deleted????
   
   figlist=figS.figure_list;
   vi=strmatch('mt_sona',figlist);
   if isempty(vi) figlist=str2mat(figlist,'mt_sona');end;
   
   mt_sfigd('figure_list',figlist);
   
   
   mt_sfigd('time_cursor_handles',curbuf);
   
end;	%nax not zero
