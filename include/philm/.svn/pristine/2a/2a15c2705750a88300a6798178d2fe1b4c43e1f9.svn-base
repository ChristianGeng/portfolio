function S=readagheader(fid)
% READAGHEADER Read header of AG50x amp and pos files
% function S=readagheader(fid)
% readagheader: Version 06.05.2013
%
%   Syntax
%       amp or pos file must be opened (and closed) by calling program.
%       After return from this function the file is positioned to read the
%       measurement data
%
%   Description
%       Burkhard's description of preliminary version:
%       "die ersten 11 Zeichen sind 'AG50xDATA_V'. Dann eine 3-stelligen zahl,
%       welche die format-version angibt, gefolgt von einem LineFeed (chr(10)).
%       Dies stellt die Signatur dar und wird sich (bis auf die 3-Stellige Zahl)
%       nicht ändern, es sei denn, Du hast noch Vorschläge/Wünsche. z.B: noch
%       ein chr(0) nach dem LineFeed, damit das als null-terminierter string
%       gelesen werden kann.
%       Es folgt eine 8-stellige zahl, welche die gesamtgröße des headers
%       inklusive der signatur in byte angibt, also den Offset zu den
%       binärdaten ausgehend vom Dateianfang. diese zahl wird ebenfalls von
%       einem LineFeed abgeschlossen. sie sollte mit führenden "0" aufgefüllt
%       sein und immer 8 stellen lang sein.
%       Danach kommen die header-daten, z.Zt. im INI-file format, aber damit bin
%       ich noch nicht glücklich. Es wird text bleiben, aber evtl. lieber XML
%       oder JSON notation, damit man die daten strukturierter ablegen kann.
%       Im moment ist nur der eintrag "NumberOfChannels" wichtig, um die
%       nachfolgenden binärdaten einlesen zu können.
%       der header wird z.Zt. abgeschlossen durch LineFeed+chr(0)+chr(26)
%       ( in hex: $0A $00 $1A )
%
%   Updates
%       23.10.2012 All files (amp, pos, posamps) now explicitly specify the
%       samplerate ('SamplingFrequencyHz' (note: not the same designation
%       as previously used in the amp files))


functionname='readagheader: Version 06.05.2013';

S=[];

headerid=agheaderid;

ntrans=9;   %should eventually be possible to determine from header

%defaults, though should actually be in any version of header
%not quite: SampleFrequency is not in preliminary v002 version of posamps or pos
nchan=16;       %NumberOfChannels
samplerate=200; %SampleFrequency

verlen=3;
offsetlen=8;
nh=length(headerid);
checkid=fread(fid,nh,'*uchar');

checkid=char(checkid');

%disp(checkid);
filehasheader=strcmp(checkid,headerid);
if filehasheader
    S.headerid=headerid;
    headerversion=fread(fid,verlen+1,'*uchar');
    headerversion=str2num(char(headerversion(1:verlen)'));
    S.headerversion=headerversion;
    dataoffset=fread(fid,offsetlen+1,'*uchar');
    dataoffset=str2num(char(dataoffset(1:offsetlen)'));
    S.dataoffset=dataoffset;
    currentpos=ftell(fid);
%    disp(currentpos);
    headerlen=dataoffset-currentpos;
    header=fread(fid,headerlen,'*uchar');
header=char(header');

%    disp(S);
%this will need parsing further in header versions later than V002
    S.nchan=nchan;
    S.samplerate=samplerate;
    S.ntrans=ntrans;

    tmpx=findfield('NumberOfChannels',header);
    if ~isempty(tmpx)
        S.nchan=tmpx;
    end;
    
%    tmpx=findfield('SampleFrequency',header);
    tmpx=findfield('SamplingFrequencyHz',header);
    if ~isempty(tmpx)
        S.samplerate=tmpx;
    end;

%Note: amp files also have fields of calibration factors for each channel (numbered from 0)
%like this:
%Calf_Channel_0=[ -2032.8900 2459.1399 2639.8999 2230.0901 2515.3301 -2724.3101 -2308.9099 2557.5400 -2729.2700 ]
%Currently these are not retrieved into separate fields in the output
%struct, but are just left in the copy of the complete header in S.header.
%This means that they will not be copied to new amp files as generated by
%e.g. filteramps, but this does not seem to affect any subsequent
%processing by calcpos


    S.header=framecomment(header,functionname);
%    disp(header);
else
    frewind(fid);
end;

%file now positioned to read data
%fclose(fid);
function tmpx=findfield(myfield,header);
tmpx=[];
tmpfield=[myfield '='];
ipi=findstr(tmpfield,header);
if length(ipi)==1
    sx=header((ipi+length(tmpfield)):end);
    ipi=findstr(char(10),sx);
    sx(ipi:end)=[];
    tmpx=str2num(sx);
    return;
end;
if length(ipi)>1
    keyboard;
    disp(['readagheader. Field  ' myfield ' is ambiguous!']);
    disp(header);
    return;
    
end;
