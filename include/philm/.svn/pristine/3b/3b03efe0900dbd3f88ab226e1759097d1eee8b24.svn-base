function mt_sonadis(timspec);
% MT_SONADIS Do sona display
% function mt_sonadis(timspec);
% mt_sonadis: Version 18.1.2008
%
%	Syntax
%		timspec: Start and end (in s.) of data to be shown in current trial
%
%	Description
%		Sonagram-style display. Actually can be used for any vector data
%		This function can also display
%		start, end and label of any sub-cuts located within the movement trajectory
%		See mt_inixy for guidance on manipulating visibility and style of these objects.
%		Display update for individual axes can be enabled and disabled using the 'display_flag' field 
%		in the xy figure's userdata
%
%	See also
%		MT_INISONA initialize sona figure
%		MT_GXYAD MT_SXYAD get/set xy axes data
%		MT_GXYFD MT_SXYFD get/set xy figure data
%		MT_SXYV or VIEW (matlab function) to change viewing angle
%
%   Updates
%       Make imresize compatible with version 7 (means default antialiasing
%       behaviour is now used)

%

oldfigh=gcf;
%get handles of sona figure
hxyf=mt_gfigh('mt_sona');
if isempty(hxyf)
    disp ('Sona display not initialized');
    return;
end;

%?? need a better way of handling figure userdata
figdat=get(hxyf,'userdata');
axislist=figdat.axis_names;
dispflag=figdat.display_flag;
vv=find(dispflag==1);
if isempty(vv)
    disp('mt_sonadis: All axes disabled');
    return;
else
    axislist=axislist(vv,:);
end;


nax=size(axislist,1);

badtime=0;
if length(timspec)~=2
    badtime=1;
    disp('mt_sonadis: Bad time spec');
else
    if timspec(2)<=timspec(1)
        disp('mt_sonadis: No time?');
        badtime=1;
    end;
end;

if badtime return; end;

timspecx=timspec;	%need a copy of timspec in loop
itrial=mt_gtrid('number');
icut=mt_gccud('number');
mylabel=mt_gccud('label');


%prepare sub_cuts
subflag=0;
if figdat.sub_cut_flag
    [cutdata,cutlabel,nsubxy]=mtxsubcutprep(timspec,'mt_sonadis');
    subflag=1;
end;

figure(hxyf);                 %make sure display visible

%main loop, thru axislist

for iax=1:nax
    axhasdata=1;
    axname=deblank(axislist(iax,:));
    orgdat=mt_gsonaad(axname);
    if isempty(orgdat)
        axhasdata=0;
    else
        mysignal=orgdat.signal;
        %check signal available
        
    end;
    
    if axhasdata
        
        
        hxya=findobj(hxyf,'tag',axname,'type','axes');
        axes(hxya);
        
        hcur=findobj(hxyf,'tag',[axname '_cursor_axis'],'type','axes');
        
        %this must be done here, regardless of current 
        %subcut settings. cf. mt_next, BUT mt_xydis!!
        
        hlab=findobj(hcur,'tag','sub_cut_label');
        hx(1)=findobj(hcur,'tag','sub_cut_start');
        hx(2)=findobj(hcur,'tag','sub_cut_end');
        delete (hlab);
        set(hx,'visible','off');
        
        
        
        hadt=get(hxya,'title');
        sf=orgdat.samplerate;
        axnum=orgdat.axis_number;
        
        
        orgdat.trial_number=itrial;
        
        %adjust timspec
        %x/y often chosen by cursor position
        %helps ensure cursor inside x/y window , e.g for following movie
        timspec=timspecx*sf;
        timspec(1)=floor(timspec(1));
        timspec(2)=ceil(timspec(2));
        timspec=timspec./sf;
        
        [sonadat,actualtime]=mt_gdata(mysignal,timspec);      
        
        %what if actualtime differs from timespec
        timspec=actualtime;      
        orgdat.time_spec=timspec;
        %      mytitle=str2mat(axname,['Trial ' int2str(itrial) ' "' mylabel '". ' num2str(timspec(1)) ' - ' num2str(timspec(2)) ' s.']);
        mytitle=[axname ': Trial ' int2str(itrial) ', Cut ' int2str(icut) ' "' mylabel '"'];
        ndat=size(sonadat,2);
        
        
        dataok=1;
        
        if ~ndat
            disp(['mt_sonadis: No data in axes ' axname]);
            dataok=0;
        end;
        
        if dataok
            
            sonat=((0:ndat-1).*(1/sf))+timspec(1);
            mydim=mt_gsigv(mysignal,'dimension');
            sonaf=mydim.axis{1};
            
            %check correct lengths... etc.
            
            dosona(hxya,sonadat,sonat,sonaf,orgdat.image_type,orgdat.shape_vector,orgdat.clim);
            
            set (hxya,'userdat',orgdat);
            set (hadt,'string',mytitle);
            
            %match time axes
            set(hcur,'xlim',get(hxya,'xlim'));
            
            %do overlay signals         
            %notes: independent scaling implemented
            %by simply scaling range of each signal individually to
            %match frequency axis
            % Alternative would be another set of axes.
            % dependent overlay signals not yet implemented
            olist=orgdat.main_overlay_signals;
            nolist=size(olist,1);

            if nolist
            indepscale=0;
            if strcmp('independent',lower(orgdat.overlay_scaling)) indepscale=1; end;
                for iol=1:nolist
                    sigtmp=deblank(olist(iol,:));
                    mytag=['main_overlay_signal_' sigtmp];
                    hol=findobj(hxya,'type','line','tag',mytag);
                    if isempty(hol)
                        holft=findobj(mt_gfigh('mt_f(t)'),'type','line','tag',sigtmp);
                        if isempty(holft)
                            disp(['Bad overlay signal in mt_sonadis ? ' sigtmp]);
                        else
                            
                            hol=line([0 1],[0 1],'tag',mytag,'color',get(holft,'color'));
                        end;
                    end;
                    [oldat,actualtime]=mt_gdata(sigtmp,timspec);
                    sfol=mt_gsigv(sigtmp,'samplerate');
                    olx=((0:(length(oldat)-1))'/sfol)+actualtime(1);
%                    keyboard;
%map range of data to frequency range of sonagram
                    if indepscale oldat=interp1([min(oldat) max(oldat)],[sonaf(1) sonaf(end)],oldat); end;

                        

set(hol,'xdata',olx,'ydata',oldat);
                end;
            end;
            
            
            
            %inner cut display
            %subflag from figure userdata  is used as overall flag
            %individual axes can be turned on and off by manipulating the sub_cut_marker field in axes userdata
            %inner cut display will be attempted if it is a string matrix with 2 rows
            
            if subflag         
                if nsubxy            
                    mtxsubcutdis(hcur,orgdat,cutdata,cutlabel,'mt_sonadis');
                end;   
            end;		%subflag   
            
        end;	%dataok
    end;	%axhasdata
    
end;		%axis loop



drawnow;

figure(oldfigh);
drawnow;
function dosona(hxya,sonadat,sonat,sonaf,image_type,shape_vector,myclim);
axes(hxya);
mytag='sona_display';
hs=findobj (hxya,'tag',mytag);


tlim=[sonat(1) sonat(end)];
flim=[sonaf(1) sonaf(end)];



%if image_type has changed, delete  the old object
if ~isempty(hs)
    oldimage=get(hs,'type');
    if ~strcmp(oldimage,image_type)
        disp('mt_sonadis: Changing image type');
        delete(hs);
        hs=[];
    end;
end;



if isempty(hs) 
    if strcmp(image_type,'surface')   
        %interp for edgecolor seems ok, probably usually not necessary. Otherwise use flat. For trajectories column meshstyle is probably best. row is also ok 
        hs=surface(1:10,1:10,zeros(10,10),'tag',mytag,'facecolor','interp','edgecolor','none','visible','off');
        set(gca,'view',[0 90]);
    end;
    if strcmp(image_type,'image')   
        hold on      
        hs=imagesc(1:10,1:10,zeros(10,10),'tag',mytag,'visible','off');
        hold off   
    end;
    
end;

[ms,ns]=size(shape_vector);
if all([ms ns])
    if ns>ms shape_vector=shape_vector';end;
    sv=shape_vector*ones(1,length(sonat));
    sonadat=sonadat+sv;
end;


if strcmp(image_type,'surface')
    set (hs,'xdata',sonat,'ydata',sonaf,'zdata',sonadat,'cdata',sonadat,'visible','on');
end;
if strcmp(image_type,'image')
    %interpolate to match size in pixels
    oldunit=get(gca,'units');
    set(gca,'units','pixel');
    axpos=get(gca,'position');
    set(gca,'units',oldunit);
    
    %this uses image processing toolbox
    %much faster than 2 calls to interp1
    %Note: final argument means no anti-alias filtering if subsampling 
    %   version 6 version of imresize does not like sparse input (e.g from EPG)
    if issparse(sonadat) sonadat=full(sonadat); end;
%    sonadat=imresize(sonadat,[axpos(4) axpos(3)],'bilinear',0);
%note: version 7 does not use the final argument in exactly the same way:
%This was designed to suppress antialias filtering when the new image size
%is smaller than the original
%for version 7 this would be done with 'antialiasing','false')
% 1.08 simply omit and try using default antialiasing behaviour
%(probably not relevant very often)
%Another consideration is that imresize had some somewhat strange effects
%compared to separate use of interp1 when used to handle de-interlaced
%video data: Maybe consider going back to interp1 in due course, if clearly
%fast enough
sonadat=imresize(sonadat,[axpos(4) axpos(3)],'bilinear');
    
    %   tref=axpos(3);fref=axpos(4);
    %   ti=sonat;
    %   tdiff=(ti(end)-ti(1))/tref;
    %   ti=(ti(1):tdiff:ti(end));
    %   sonadat=(interp1(sonat,sonadat',ti,'*linear'))';
    %   
    %   fi=sonaf;
    %   fdiff=(fi(end)-fi(1))/fref;
    %   fi=(fi(1):fdiff:fi(end));
    %   sonadat=interp1(sonaf,sonadat,fi,'*linear');
    
    
    
    
    set (hs,'xdata',tlim,'ydata',flim,'cdata',sonadat,'visible','on');
end;



if length(myclim)==2 set(gca,'clim',myclim);end;

usedclim=get(gca,'clim');
hcbax=findobj(get(gca,'parent'),'tag',[get(gca,'tag') '_colorbar'],'type','axes');
hcbim=findobj(hcbax,'type','image');
set(hcbax,'ylim',usedclim);
set(hcbim,'ydata',usedclim);


%colorbar;	%update colorbar
%why is mode manual anyway?
set(gca,'xlim',tlim);
%image does rather strange automatic scaling
set(gca,'ylim',flim);
